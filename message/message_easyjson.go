// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package message

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeVoteMessage(in *jlexer.Lexer, out *VoteResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Result":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Result = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 int
					v1 = int(in.Int())
					(out.Result)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage(out *jwriter.Writer, in VoteResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Result {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.Int(int(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoteResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoteResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage(l, v)
}
func easyjson4086215fDecodeVoteMessage1(in *jlexer.Lexer, out *VoteParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "N":
			out.N = uint64(in.Uint64())
		case "T":
			out.T = uint64(in.Uint64())
		case "A":
			if in.IsNull() {
				in.Skip()
				out.A = nil
			} else {
				out.A = in.Bytes()
			}
		case "Params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				out.Params = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage1(out *jwriter.Writer, in VoteParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.T))
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.Base64Bytes(in.A)
	}
	{
		const prefix string = ",\"Params\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Params)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoteParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoteParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage1(l, v)
}
func easyjson4086215fDecodeVoteMessage2(in *jlexer.Lexer, out *VoteDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Brief":
			out.Brief = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "VoteType":
			out.VoteType = string(in.String())
		case "Candidates":
			if in.IsNull() {
				in.Skip()
				out.Candidates = nil
			} else {
				in.Delim('[')
				if out.Candidates == nil {
					if !in.IsDelim(']') {
						out.Candidates = make([]string, 0, 4)
					} else {
						out.Candidates = []string{}
					}
				} else {
					out.Candidates = (out.Candidates)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Candidates = append(out.Candidates, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage2(out *jwriter.Writer, in VoteDetail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Brief\":"
		out.RawString(prefix)
		out.String(string(in.Brief))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"VoteType\":"
		out.RawString(prefix)
		out.String(string(in.VoteType))
	}
	{
		const prefix string = ",\"Candidates\":"
		out.RawString(prefix)
		if in.Candidates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Candidates {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoteDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoteDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage2(l, v)
}
func easyjson4086215fDecodeVoteMessage3(in *jlexer.Lexer, out *VoteBrief) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Brief":
			out.Brief = string(in.String())
		case "VoteType":
			out.VoteType = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "StartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "Deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage3(out *jwriter.Writer, in VoteBrief) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Brief\":"
		out.RawString(prefix)
		out.String(string(in.Brief))
	}
	{
		const prefix string = ",\"VoteType\":"
		out.RawString(prefix)
		out.String(string(in.VoteType))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteBrief) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoteBrief) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteBrief) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoteBrief) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage3(l, v)
}
func easyjson4086215fDecodeVoteMessage4(in *jlexer.Lexer, out *VoteAcceptation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Result":
			out.Result = bool(in.Bool())
		case "Topic":
			out.Topic = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage4(out *jwriter.Writer, in VoteAcceptation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Bool(bool(in.Result))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoteAcceptation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoteAcceptation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoteAcceptation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoteAcceptation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage4(l, v)
}
func easyjson4086215fDecodeVoteMessage5(in *jlexer.Lexer, out *TestMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage5(out *jwriter.Writer, in TestMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage5(l, v)
}
func easyjson4086215fDecodeVoteMessage6(in *jlexer.Lexer, out *PubKeyPart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Part":
			if in.IsNull() {
				in.Skip()
				out.Part = nil
			} else {
				out.Part = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage6(out *jwriter.Writer, in PubKeyPart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Part\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Part)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PubKeyPart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PubKeyPart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PubKeyPart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PubKeyPart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage6(l, v)
}
func easyjson4086215fDecodeVoteMessage7(in *jlexer.Lexer, out *PubKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage7(out *jwriter.Writer, in PubKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PubKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PubKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PubKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PubKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage7(l, v)
}
func easyjson4086215fDecodeVoteMessage8(in *jlexer.Lexer, out *PolyResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				out.Result = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage8(out *jwriter.Writer, in PolyResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolyResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolyResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolyResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolyResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage8(l, v)
}
func easyjson4086215fDecodeVoteMessage9(in *jlexer.Lexer, out *PlainTextPart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				out.Text = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage9(out *jwriter.Writer, in PlainTextPart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Text)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlainTextPart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlainTextPart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlainTextPart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlainTextPart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage9(l, v)
}
func easyjson4086215fDecodeVoteMessage10(in *jlexer.Lexer, out *ID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Brief":
			out.Brief = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "StartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "Deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		case "Text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				out.Text = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage10(out *jwriter.Writer, in ID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Brief\":"
		out.RawString(prefix)
		out.String(string(in.Brief))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Text)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage10(l, v)
}
func easyjson4086215fDecodeVoteMessage11(in *jlexer.Lexer, out *CipherText) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = MsgType(in.Int())
		case "From":
			out.From = string(in.String())
		case "To":
			out.To = string(in.String())
		case "Topic":
			out.Topic = string(in.String())
		case "Text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				out.Text = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeVoteMessage11(out *jwriter.Writer, in CipherText) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Text)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CipherText) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeVoteMessage11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CipherText) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeVoteMessage11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CipherText) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeVoteMessage11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CipherText) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeVoteMessage11(l, v)
}
