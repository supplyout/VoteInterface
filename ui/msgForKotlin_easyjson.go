// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ui

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5e0012dbDecodeVoteUi(in *jlexer.Lexer, out *MsgVoteDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MType":
			out.MType = msgType(in.Int())
		case "Title":
			out.Title = string(in.String())
		case "Brief":
			out.Brief = string(in.String())
		case "Candidates":
			if in.IsNull() {
				in.Skip()
				out.Candidates = nil
			} else {
				in.Delim('[')
				if out.Candidates == nil {
					if !in.IsDelim(']') {
						out.Candidates = make([]string, 0, 4)
					} else {
						out.Candidates = []string{}
					}
				} else {
					out.Candidates = (out.Candidates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Candidates = append(out.Candidates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e0012dbEncodeVoteUi(out *jwriter.Writer, in MsgVoteDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MType))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Brief\":"
		out.RawString(prefix)
		out.String(string(in.Brief))
	}
	{
		const prefix string = ",\"Candidates\":"
		out.RawString(prefix)
		if in.Candidates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Candidates {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgVoteDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e0012dbEncodeVoteUi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgVoteDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e0012dbEncodeVoteUi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgVoteDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e0012dbDecodeVoteUi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgVoteDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e0012dbDecodeVoteUi(l, v)
}
func easyjson5e0012dbDecodeVoteUi1(in *jlexer.Lexer, out *MsgResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MType":
			out.MType = msgType(in.Int())
		case "Result":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Result = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 int
					v4 = int(in.Int())
					(out.Result)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "IsCorrect":
			out.IsCorrect = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e0012dbEncodeVoteUi1(out *jwriter.Writer, in MsgResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MType))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Result {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Int(int(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"IsCorrect\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCorrect))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e0012dbEncodeVoteUi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e0012dbEncodeVoteUi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e0012dbDecodeVoteUi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e0012dbDecodeVoteUi1(l, v)
}
func easyjson5e0012dbDecodeVoteUi2(in *jlexer.Lexer, out *MsgPartiesNum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MType":
			out.MType = msgType(in.Int())
		case "Num":
			out.Num = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e0012dbEncodeVoteUi2(out *jwriter.Writer, in MsgPartiesNum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MType))
	}
	{
		const prefix string = ",\"Num\":"
		out.RawString(prefix)
		out.Int(int(in.Num))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgPartiesNum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e0012dbEncodeVoteUi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgPartiesNum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e0012dbEncodeVoteUi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgPartiesNum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e0012dbDecodeVoteUi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgPartiesNum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e0012dbDecodeVoteUi2(l, v)
}
func easyjson5e0012dbDecodeVoteUi3(in *jlexer.Lexer, out *MsgNewVote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MType":
			out.MType = msgType(in.Int())
		case "Starter":
			out.Starter = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Brief":
			out.Brief = string(in.String())
		case "VoteType":
			out.VoteType = string(in.String())
		case "Start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "Deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e0012dbEncodeVoteUi3(out *jwriter.Writer, in MsgNewVote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MType))
	}
	{
		const prefix string = ",\"Starter\":"
		out.RawString(prefix)
		out.String(string(in.Starter))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Brief\":"
		out.RawString(prefix)
		out.String(string(in.Brief))
	}
	{
		const prefix string = ",\"VoteType\":"
		out.RawString(prefix)
		out.String(string(in.VoteType))
	}
	{
		const prefix string = ",\"Start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	{
		const prefix string = ",\"Deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgNewVote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e0012dbEncodeVoteUi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgNewVote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e0012dbEncodeVoteUi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgNewVote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e0012dbDecodeVoteUi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgNewVote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e0012dbDecodeVoteUi3(l, v)
}
func easyjson5e0012dbDecodeVoteUi4(in *jlexer.Lexer, out *MsgGotPK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MType":
			out.MType = msgType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e0012dbEncodeVoteUi4(out *jwriter.Writer, in MsgGotPK) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgGotPK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e0012dbEncodeVoteUi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgGotPK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e0012dbEncodeVoteUi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgGotPK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e0012dbDecodeVoteUi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgGotPK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e0012dbDecodeVoteUi4(l, v)
}
